---
import BaseLayout from './BaseLayout.astro';
const { title = 'Bards Quest', description = 'Portable archives.', canonical } = Astro.props;
const navItems = [
  { label: 'BARDS QUEST', href: '/' },
  { label: 'XTWITTER', href: 'https://x.com', external: true },
  { label: 'NEWS', href: '/news' },
  { label: 'GITHUB', href: 'https://github.com/maguil36/bards_quest_web', external: true },
  { label: 'MAP', href: '/map' },
  { label: 'PATREON', href: 'https://patreon.com', external: true },
  { label: 'MUSIC', href: '#' },
  { label: 'OPTIONS', href: '/options' },
  { label: 'WIKI', href: '#', external: true },  // placeholder link removed actual mspaintadventures wiki link
  { label: 'CREDITS', href: '#' },
];
---
<BaseLayout title={title} description={description} canonical={canonical} showHeader={false} showFooter={false} bodyClass="mspa">
  <slot name="head" slot="head" />
  <main class="wrap">
    <nav class="mspa-nav">
      {navItems.map((item, i) => (
        <span class="mspa-nav-item">
          {i !== 0 && <span class="dot">•</span>}
          {item.external ? (
            <a href={item.href} target="_blank" rel="noopener noreferrer">{item.label}</a>
          ) : (
            <a href={item.href}>{item.label}</a>
          )}
        </span>
      ))}
    </nav>

    <section class="mspa-card">
      <div class="panel">
        <slot />
      </div>
    </section>

    <footer class="mspa-footer">
      <p>© 2025 - {new Date().getFullYear()} Bards Quest</p>
      <p><a href="/privacy">Privacy</a> – <a href="/legal">Legal</a></p>
    </footer>

    <img src="data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='72' height='72' viewBox='0 0 72 72'><defs><radialGradient id='g' cx='35' cy='35' r='35' gradientUnits='userSpaceOnUse'><stop offset='0' stop-color='%23888'/><stop offset='1' stop-color='%23333'/></radialGradient></defs><circle cx='36' cy='36' r='32' fill='url(%23g)'/><circle cx='26' cy='28' r='4' fill='%23555'/><circle cx='46' cy='38' r='3' fill='%23555'/><circle cx='38' cy='22' r='2.5' fill='%23555'/></svg>" alt="decoration" class="sprite left" />
    <img src="data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='72' height='72' viewBox='0 0 72 72'><defs><radialGradient id='g' cx='35' cy='35' r='35' gradientUnits='userSpaceOnUse'><stop offset='0' stop-color='%23888'/><stop offset='1' stop-color='%23333'/></radialGradient></defs><circle cx='36' cy='36' r='32' fill='url(%23g)'/><circle cx='42' cy='28' r='4' fill='%23555'/><circle cx='26' cy='40' r='3' fill='%23555'/><circle cx='34' cy='50' r='2.5' fill='%23555'/></svg>" alt="decoration" class="sprite right" />
  </main>

  <script>
    // Listen for theme change messages from the game iframe
    window.addEventListener('message', (event) => {
      // Check if this is a theme change message from the game
      if (event.data && event.data.type === 'GAME_THEME_CHANGE') {
        const newTheme = event.data.theme;

        // Check user's theme preference from localStorage
        const themeKey = 'mspa:theme';
        let userTheme = null;
        try {
          userTheme = localStorage.getItem(themeKey);
        } catch (e) {
          // localStorage not available
        }

        // Only apply the game's theme if user has "default" or no preference
        if (!userTheme || userTheme === 'default') {
          // Get the current theme before changing
          const currentTheme = document.documentElement.getAttribute('data-theme') || 'space';

          // Only transition if the theme is actually changing
          if (currentTheme !== newTheme) {
            // Step 1: Set transition to instant temporarily
            document.documentElement.setAttribute('data-transition', 'instant');

            // Step 2: Ensure current theme is applied
            document.documentElement.setAttribute('data-theme', currentTheme);

            // Step 3: Force a reflow to ensure the browser renders the current state
            void document.documentElement.offsetHeight;

            // Step 4: Restore smooth transition
            document.documentElement.setAttribute('data-transition', 'smooth');

            // Step 5: Use requestAnimationFrame to apply new theme on next frame
            requestAnimationFrame(() => {
              document.documentElement.setAttribute('data-theme', newTheme);
              console.log('Parent page theme smoothly transitioned to:', newTheme);
            });
          }
        }
      }
    });
  </script>
</BaseLayout>
